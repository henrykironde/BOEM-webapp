import streamlit as st
import leafmap.foliumap as leafmap
import geopandas as gpd
import os
import sys
from pathlib import Path
import sqlite3
import pandas as pd
import requests

# Add the project root to the Python path
root_dir = str(Path(__file__).parents[2].absolute())
if root_dir not in sys.path:
    sys.path.append(root_dir)

def load_vector(file_path):
    """Load and cache vector data"""
    if file_path.endswith('.mbtiles'):
        # Connect to MBTiles file
        conn = sqlite3.connect(file_path)
        # Extract metadata
        metadata = dict(conn.execute('SELECT * FROM metadata').fetchall())
        # Get the center coordinates from metadata
        center = metadata.get('center', '0,0,2').split(',')
        lon, lat = float(center[0]), float(center[1])
        zoom = int(center[2]) if len(center) > 2 else 2
        attribution = metadata.get('attribution', 'Generated by Tippecanoe')
        return None, lon, lat, zoom, metadata.get('name', 'MBTiles Layer'), attribution
    else:
        return gpd.read_file(file_path), None, None, None, None, None

def app():
    # Reduce default padding
    st.set_page_config(layout="wide")
    st.markdown("""
        <style>
        .block-container {
            padding-left: 2rem;
            padding-right: 2rem;
        }
        </style>
        """, unsafe_allow_html=True)

    st.title("Observations")
    
    # Get the app's data directory
    app_data_dir = Path(__file__).parents[1] / "data"
    
    # Create map
    m = leafmap.Map()
    m.add_basemap("OpenStreetMap")
    
    # Always use the default data file
    default_file = app_data_dir / "predictions.shp"
    
    if default_file.exists():
        try:
            process_vector_file(default_file, m, "#0000FF")
        except Exception as e:
            st.error(f"Error processing vector data: {str(e)}")
    else:
        st.error(f"Data file not found: {default_file}")
    
    # Adjust map size - reduced width from 1200 to 1000
    m.to_streamlit(height=700, width=1000)
    
    # Instructions below the map
    st.info("""
    **How to use:**
    - Click on any point on the map to view its metadata
    """)
    
    # Add download button for the data
    if default_file.exists():
        try:
            with open(default_file, 'rb') as file:
                shapefile_bytes = file.read()
                st.download_button(
                    label="Download Data",
                    data=shapefile_bytes,
                    file_name="predictions.shp",
                    mime="application/octet-stream",
                    help="Download the shapefile containing all observations"
                )
        except Exception as e:
            st.error(f"Error preparing download: {str(e)}")

def process_vector_file(file_path, m, color):
    """Process and add vector file to map"""
    try:
        gdf, lon, lat, zoom, layer_name, attribution = load_vector(str(file_path))
        
        if gdf is not None:
            # Regular vector file
            m.add_gdf(
                gdf,
                layer_name=f"Vector Layer - {file_path.stem}",
                style={'fillColor': color}
            )
        else:
            # MBTiles file
            xyz_url = f"mbtiles://{file_path.absolute()}"
            m.add_tile_layer(
                url=xyz_url,
                name=layer_name or f"MBTiles Layer - {file_path.stem}",
                attribution=attribution
            )
            
            if lon is not None and lat is not None:
                m.set_center(lon, lat, zoom)
    
    except Exception as e:
        raise Exception(f"Error processing {file_path.name}: {str(e)}")

if __name__ == "__main__":
    app()